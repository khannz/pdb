// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DropboxClient is the client API for Dropbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropboxClient interface {
	SayDiff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error)
	// Upload uploads file
	Upload(ctx context.Context, opts ...grpc.CallOption) (Dropbox_UploadClient, error)
}

type dropboxClient struct {
	cc grpc.ClientConnInterface
}

func NewDropboxClient(cc grpc.ClientConnInterface) DropboxClient {
	return &dropboxClient{cc}
}

func (c *dropboxClient) SayDiff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error) {
	out := new(DiffResponse)
	err := c.cc.Invoke(ctx, "/pexip.Dropbox/SayDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropboxClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Dropbox_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dropbox_serviceDesc.Streams[0], "/pexip.Dropbox/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &dropboxUploadClient{stream}
	return x, nil
}

type Dropbox_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type dropboxUploadClient struct {
	grpc.ClientStream
}

func (x *dropboxUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dropboxUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DropboxServer is the server API for Dropbox service.
// All implementations must embed UnimplementedDropboxServer
// for forward compatibility
type DropboxServer interface {
	SayDiff(context.Context, *DiffRequest) (*DiffResponse, error)
	// Upload uploads file
	Upload(Dropbox_UploadServer) error
	mustEmbedUnimplementedDropboxServer()
}

// UnimplementedDropboxServer must be embedded to have forward compatible implementations.
type UnimplementedDropboxServer struct {
}

func (UnimplementedDropboxServer) SayDiff(context.Context, *DiffRequest) (*DiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayDiff not implemented")
}
func (UnimplementedDropboxServer) Upload(Dropbox_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDropboxServer) mustEmbedUnimplementedDropboxServer() {}

// UnsafeDropboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropboxServer will
// result in compilation errors.
type UnsafeDropboxServer interface {
	mustEmbedUnimplementedDropboxServer()
}

func RegisterDropboxServer(s grpc.ServiceRegistrar, srv DropboxServer) {
	s.RegisterService(&_Dropbox_serviceDesc, srv)
}

func _Dropbox_SayDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropboxServer).SayDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pexip.Dropbox/SayDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropboxServer).SayDiff(ctx, req.(*DiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dropbox_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DropboxServer).Upload(&dropboxUploadServer{stream})
}

type Dropbox_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type dropboxUploadServer struct {
	grpc.ServerStream
}

func (x *dropboxUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dropboxUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Dropbox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pexip.Dropbox",
	HandlerType: (*DropboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayDiff",
			Handler:    _Dropbox_SayDiff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Dropbox_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/dropbox.proto",
}
